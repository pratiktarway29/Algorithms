# Problem:
A non-empty array A consisting of N integers is given.

A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.

The goal is to check whether array A is a permutation.

Write a function:

function solution(A);

that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

For example, given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
the function should return 1.

Given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
the function should return 0.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [1..1,000,000,000].


# Solution:
function solution(A) {
    const N = A.length;
    const seen = new Array(N).fill(false);

    for (let i = 0; i < N; i++) {
        if (A[i] > N || seen[A[i] - 1]) {
            return 0; // A number larger than N or duplicate element
        }
        seen[A[i] - 1] = true;
    }

    for (let i = 0; i < N; i++) {
        if (!seen[i]) {
            return 0; // Missing a number in the range [1, N]
        }
    }

    return 1; // All elements from 1 to N are present
}

// Example usage
const array1 = [4, 1, 3, 2];
console.log(solution(array1)); // Output: 1

const array2 = [4, 1, 3];
console.log(solution(array2)); // Output: 0
