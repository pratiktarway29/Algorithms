# Problem: 
A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

class Solution { public int solution(int[] A); }

that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].


# Solution:
function solution(A) {
    const n = A.length;
    
    // Step 1: Find the leader
    let candidate = null;
    let count = 0;
    for (const num of A) {
        if (count === 0) {
            candidate = num;
            count = 1;
        } else if (candidate === num) {
            count++;
        } else {
            count--;
        }
    }
    
    // Step 2: Count the occurrences of the leader
    count = 0;
    for (const num of A) {
        if (num === candidate) {
            count++;
        }
    }
    
    if (count <= n / 2) {
        // If the leader doesn't occur more than half the time, no equi leaders exist
        return 0;
    }
    
    let equiLeaderCount = 0;
    let leftLeaderCount = 0;
    
    for (let i = 0; i < n - 1; i++) {
        if (A[i] === candidate) {
            leftLeaderCount++;
        }
        
        // Check if the leader in the left subarray is also a leader in the right subarray
        if (leftLeaderCount > (i + 1) / 2 && (count - leftLeaderCount) > (n - i - 1) / 2) {
            equiLeaderCount++;
        }
    }
    
    return equiLeaderCount;
}

// Example usage
const A = [4, 3, 4, 4, 4, 2];
console.log(solution(A)); // Output: 2

