# Problem: 
A non-empty array A consisting of N integers is given. A pair of integers (P, Q), such that 0 ≤ P < Q < N, is called a slice of array A (notice that the slice contains at least two elements). The average of a slice (P, Q) is the sum of A[P] + A[P + 1] + ... + A[Q] divided by the length of the slice. To be precise, the average equals (A[P] + A[P + 1] + ... + A[Q]) / (Q − P + 1).

For example, array A such that:

    A[0] = 4
    A[1] = 2
    A[2] = 2
    A[3] = 5
    A[4] = 1
    A[5] = 5
    A[6] = 8
contains the following example slices:

slice (1, 2), whose average is (2 + 2) / 2 = 2;
slice (3, 4), whose average is (5 + 1) / 2 = 3;
slice (1, 4), whose average is (2 + 2 + 5 + 1) / 4 = 2.5.
The goal is to find the starting position of a slice whose average is minimal.

Write a function:

function solution(A);

that, given a non-empty array A consisting of N integers, returns the starting position of the slice with the minimal average. If there is more than one slice with a minimal average, you should return the smallest starting position of such a slice.

For example, given array A such that:

    A[0] = 4
    A[1] = 2
    A[2] = 2
    A[3] = 5
    A[4] = 1
    A[5] = 5
    A[6] = 8
the function should return 1, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [2..100,000];
each element of array A is an integer within the range [−10,000..10,000].





# Solution:
Mathematical observation - Every Slice can be broken into 2 or 3 slices.

function solution(A) {
    const N = A.length;
    let min_avg = (A[0] + A[1]) / 2; // Initialize with average of first 2 elements
    let min_idx = 0;

    for (let i = 0; i < N - 2; i++) {
        const avg2 = (A[i] + A[i + 1]) / 2;
        const avg3 = (A[i] + A[i + 1] + A[i + 2]) / 3;

        if (avg2 < min_avg) {
            min_avg = avg2;
            min_idx = i;
        }

        if (avg3 < min_avg) {
            min_avg = avg3;
            min_idx = i;
        }
    }

    // Check the last 2-element slice
    const lastAvg = (A[N - 2] + A[N - 1]) / 2;
    if (lastAvg < min_avg) {
        min_idx = N - 2;
    }

    return min_idx;
}

// Test the function
const A = [4, 2, 2, 5, 1, 5, 8];
console.log(solution(A)); // Output: 1
