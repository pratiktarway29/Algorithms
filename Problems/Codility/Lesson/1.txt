# Problem:
We draw N discs on a plane. The discs are numbered from 0 to N − 1. An array A of N non-negative integers, specifying the radiuses of the discs, is given. The J-th disc is drawn with its center at (J, 0) and radius A[J].

We say that the J-th disc and K-th disc intersect if J ≠ K and the J-th and K-th discs have at least one common point (assuming that the discs contain their borders).

The figure below shows discs drawn for N = 6 and A as follows:

  A[0] = 1
  A[1] = 5
  A[2] = 2
  A[3] = 1
  A[4] = 4
  A[5] = 0


There are eleven (unordered) pairs of discs that intersect, namely:

discs 1 and 4 intersect, and both intersect with all the other discs;
disc 2 also intersects with discs 0 and 3.
Write a function:

class Solution { public int solution(int[] A); }

that, given an array A describing N discs as explained above, returns the number of (unordered) pairs of intersecting discs. The function should return −1 if the number of intersecting pairs exceeds 10,000,000.

Given array A shown above, the function should return 11, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
each element of array A is an integer within the range [0..2,147,483,647].


# Solution:
function solution(A) {
    const N = A.length;

    // Create arrays to store the starting and ending points of each disc
    const startPoints = new Array(N).fill(0);
    const endPoints = new Array(N).fill(0);

    // Count the number of times each point is a start or end point
    for (let i = 0; i < N; i++) {
        const leftBoundary = Math.max(0, i - A[i]);
        const rightBoundary = Math.min(N - 1, i + A[i]);

        startPoints[leftBoundary]++;
        endPoints[rightBoundary]++;
    }

    let intersections = 0; // Counter for intersections
    let activeDiscs = 0; // Number of currently active discs

    // Loop through each point to calculate intersections
    for (let i = 0; i < N; i++) {
        if (startPoints[i] > 0) {
            // Increment active discs by the number of discs that started at this point
            intersections += activeDiscs * startPoints[i];

            // Increment active discs by the number of discs that started at this point
            intersections += startPoints[i] * (startPoints[i] - 1) / 2;

            if (intersections > 10000000) {
                return -1; // Check for the limit
            }

            activeDiscs += startPoints[i];
        }

        // Decrement active discs by the number of discs that ended at this point
        activeDiscs -= endPoints[i];
    }

    return intersections;
}
