# Problem: 
You are given an array A consisting of N integers.

For each number A[i] such that 0 â‰¤ i < N, we want to count the number of elements of the array that are not the divisors of A[i]. We say that these elements are non-divisors.

For example, consider integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 1
    A[2] = 2
    A[3] = 3
    A[4] = 6
For the following elements:

A[0] = 3, the non-divisors are: 2, 6,
A[1] = 1, the non-divisors are: 3, 2, 3, 6,
A[2] = 2, the non-divisors are: 3, 3, 6,
A[3] = 3, the non-divisors are: 2, 6,
A[4] = 6, there aren't any non-divisors.
Write a function:

class Solution { public int[] solution(int[] A); }

that, given an array A consisting of N integers, returns a sequence of integers representing the amount of non-divisors.

Result array should be returned as an array of integers.

For example, given:

    A[0] = 3
    A[1] = 1
    A[2] = 2
    A[3] = 3
    A[4] = 6
the function should return [2, 4, 3, 2, 0], as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..50,000];
each element of array A is an integer within the range [1..2 * N].


# Solution:
function solution(A) {
    const N = A.length;
    const MAX_VALUE = 2 * N + 1;

    // Count the occurrences of each element in A
    const occurrence = new Array(MAX_VALUE).fill(0);
    for (let num of A) {
        occurrence[num]++;
    }

    // Count the number of divisors for each element
    const divisorCount = new Array(MAX_VALUE).fill(0);
    for (let i = 1; i < MAX_VALUE; i++) {
        for (let j = i; j < MAX_VALUE; j += i) {
            divisorCount[j] += occurrence[i];
        }
    }

    // Calculate the non-divisors for each element
    const result = [];
    for (let num of A) {
        result.push(N - divisorCount[num]);
    }

    return result;
}

// Example usage
const A = [3, 1, 2, 3, 6];
const result = solution(A);
console.log(result); // Output: [2, 4, 3, 2, 0]
